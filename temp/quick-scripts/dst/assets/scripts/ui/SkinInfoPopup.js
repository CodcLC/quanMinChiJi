
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/ui/SkinInfoPopup.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '906abQ6KhRK94jc8lii7QN9', 'SkinInfoPopup');
// scripts/ui/SkinInfoPopup.js

"use strict";

var Utils = require("Utils");

cc.Class({
  "extends": cc.Component,
  properties: {
    actorAnim: sp.Skeleton,
    nameUI: cc.Label,
    descUI: cc.Label,
    skinData: {
      "default": {}
    },
    methodUIGroup: [cc.Node],
    methodBtnGroup: [cc.Node],
    onceClick: {
      "default": true,
      visible: false
    }
  },
  onLoad: function onLoad() {
    GameApp.eventManager.on(EventNames.EVENT_UPDATE_SHOP_CHOOSED_SHOW, this.updateUnLockShow);
  },
  onDestroy: function onDestroy() {
    GameApp.eventManager.removeListener(EventNames.EVENT_UPDATE_SHOP_CHOOSED_SHOW, this.updateUnLockShow);
  },
  // update (dt) {},
  init: function init(_skinData) {
    this.skinData = _skinData;
    this.initNameShow();
    this.initSkinShow();
    this.updateMethodShow();
  },
  initNameShow: function initNameShow() {
    this.nameUI.string = this.skinData.name;
    var colorIndex = Math.floor((this.skinData.skinid - 1) / 5);
    this.nameUI.node.color = new cc.Color().fromHEX(NameColor[colorIndex]);
    this.descUI.string = this.skinData.des;
  },
  initSkinShow: function initSkinShow() {
    var _this = this;

    if (this.skinData.skinid < 21) {
      this.actorAnim.skeletonData = GameApp.uiManager.normalSkinData;
      this.actorAnim.setSkin(this.skinData.skinname);
    } else {
      this.actorAnim.skeletonData = GameApp.uiManager.advanceSkinDataGroup[this.skinData.skinid - 21];
    }

    if (this.skinData.skinid < 21) {
      this.actorAnim.setAnimation(0, 'await', true);
    } else {
      this.actorAnim.setAnimation(0, 'await_main_1', false);
      this.actorAnim.setCompleteListener(function () {
        _this.actorAnim.setAnimation(0, 'await_main_' + Tools.randomNum(1, 3), false);
      });
    }
  },
  updateMethodShow: function updateMethodShow() {
    if (this.skinData.skinid > 25) {
      this.methodUIGroup[2].children[0].getComponent(cc.Label).string = GameApp.dataManager.userData.havePieceNum[this.skinData.skinid] + '/' + this.skinData.needpiece;
      this.setpieceIcon(this.skinData.skinid);
    }

    this.updateUnLockShow(this);
  },
  updateUnLockShow: function updateUnLockShow(self) {
    self.methodUIGroup[0].active = self.methodBtnGroup[0].active = self.skinData.needcoin;
    self.methodUIGroup[1].active = self.methodBtnGroup[1].active = self.skinData.needgem;
    self.methodUIGroup[2].active = self.methodBtnGroup[2].active = self.skinData.needpiece;
    self.methodBtnGroup[3].active = false;
    self.methodUIGroup[0].children[0].getComponent(cc.Label).string = self.skinData.needcoin;
    self.methodUIGroup[1].children[0].getComponent(cc.Label).string = GameApp.dataManager.userData.playedVideoNum + '/' + self.skinData.needgem;
    var unlockarr = GameApp.dataManager.userData.unLockedSkinIdArr.concat();
    unlockarr.sort(function (a, b) {
      return a - b;
    });
    unlockarr.forEach(function (element) {
      if (element == self.skinData.skinid) {
        self.methodBtnGroup[0].active = false;
        self.methodBtnGroup[1].active = false;
        self.methodBtnGroup[2].active = false;
        self.methodBtnGroup[3].active = true;
        return;
      }
    });
    self.updateChoosedShow2(self);
  },
  updateChoosedShow2: function updateChoosedShow2(self) {
    if (GameApp.dataManager.getChoosedSkinId() == self.skinData.skinid) {
      self.methodBtnGroup[3].children[0].active = false;
      self.methodBtnGroup[3].children[1].active = true;
    } else {
      self.methodBtnGroup[3].children[0].active = true;
      self.methodBtnGroup[3].children[1].active = false;
    }
  },
  setpieceIcon: function setpieceIcon(id) {
    var self = this;
    cc.loader.loadRes("texture/skin_piece/card_p_" + id, cc.SpriteFrame, function (err, spriteFrame) {
      self.methodUIGroup[2].getComponent(cc.Sprite).spriteFrame = spriteFrame;
    });
  },
  selelctBtnClick: function selelctBtnClick() {
    GameApp.audioManager.playEffect('click');
    GameApp.dataManager.setChoosedSkinId(this.skinData.skinid);
    GameApp.eventManager.emit(EventNames.EVENT_UPDATE_SHOP_CHOOSED_SHOW, this);
  },
  coinBtnClick: function coinBtnClick() {
    GameApp.audioManager.playEffect('click');

    if (GameApp.dataManager.reduceCoin(this.skinData.needcoin)) {
      GameApp.uiManager.showToast("解锁成功");
      GameApp.dataManager.unLockSkin(this.skinData.skinid);
      GameApp.eventManager.emit(EventNames.EVENT_UPDATE_SHOP_CHOOSED_SHOW, this);
    } else {
      GameApp.uiManager.showToast("金币不足！");
    }
  },
  videoBtnClick: function videoBtnClick() {
    if (window.wx) {
      GameApp.uiManager.showToast("暂未开放！");
      return;
    }

    if (!this.onceClick) return;
    this.onceClick = false;
    GameApp.audioManager.playEffect('click');
    var self = this;

    if (window.tt) {
      Utils.addVideo("addVideo", function () {
        //看完了
        self.onceClick = true;
        GameApp.dataManager.addPlayedVideoNum();
        GameApp.eventManager.emit(EventNames.EVENT_UPDATE_SHOP_CHOOSED_SHOW, self);
      }, function (_info) {
        //没看完
        self.onceClick = true;
        _info ? GameApp.uiManager.showToast(_info) : GameApp.uiManager.showToast("未看完视频！");
      });
    } else {
      self.onceClick = true;
      GameApp.dataManager.addPlayedVideoNum();
      GameApp.eventManager.emit(EventNames.EVENT_UPDATE_SHOP_CHOOSED_SHOW, self);
    }
  },
  pieceBtnClick: function pieceBtnClick() {
    GameApp.audioManager.playEffect('click');
    GameApp.uiManager.showToast("碎片不足,请从" + "<color=#faf80d>黄金宝箱</color>" + "获取！");
  },
  onCloseBtnClick: function onCloseBtnClick() {
    GameApp.audioManager.playEffect('click');
    GameApp.uiManager.closePopup("SkinInfoPopup");
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,